---
import "../assets/styles/card.css";
---

<style>
    .surname-card {
        display: flex;
        align-items: center;
        margin: 10px 0;
        gap: 8px;
    }

    .surname-card p {
        margin: 0;
        display: flex;
        align-items: center;
        flex: 1;
    }

    .surname-card strong {
        min-width: 20px;
        display: inline-block;
        text-align: center;
    }

    .search-container {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .search-bar {
        width: 50%;
        padding: 10px;
        font-size: 16px;
        border: 2px solid #ddd;
        border-radius: 5px;
        margin-bottom: 1em;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        transition: box-shadow 0.3s ease-in-out;
    }

    .highlight {
        background-color: yellow;
    }

    .open {
        grid-column: 1 / -1;
    }

    .card.open {
        max-height: none;
        transition: max-height 0.3s ease;
    }
</style>

<div class="search-container">
    <input type="text" id="searchInput" class="search-bar" placeholder="Search by Gotra, Deity, Caste, or Surname (Hindi/English)" />
</div>

<div class="card-container" id="card-container"></div>

<script>
    import { colors } from "../utils/constants.ts";

    fetch("/main.json")
        .then((response) => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then((data) => {
            const cardContainer = document.getElementById("card-container");
            const searchInput = document.getElementById("searchInput");

            function highlightText(text, query) {
                if (!query) return text;
                const regex = new RegExp(`(${query.trim()})`, "gi");
                return text.replace(regex, `<span style='background-color: yellow' class="highlight">$1</span>`);
            }

            function createKeyValuePairs(branch, query) {
                return Object.entries(branch)
                    .filter(([key]) => ["Caste", "Gotra", "Deity"].includes(key))
                    .map(([key, value]) => {
                        let icon = "";
                        switch (key) {
                            case "Gotra":
                                icon = "ðŸ§¬";
                                break;
                            case "Deity":
                                icon = "ðŸ•‰";
                                break;
                            case "Caste":
                                icon = "ðŸŒ¿";
                                break;
                            default:
                                icon = "ðŸ”‘";
                        }
                        const highlightedValue = highlightText(value, query);
                        return `
                            <p title="${key}">${icon} : <span>${highlightedValue}</span></p>
                        `;
                    })
                    .join("");
            }

            function createSurnameCards(surnames, gotra, deity, branchName, query) {
                return surnames.map((surname) => `
                    <div class="surname-card">
                        <p><strong title="Gotra">ðŸ§¬ :</strong> ${highlightText(gotra, query)}</p>
                        <p><strong title="Deity">ðŸ•‰ :</strong> ${highlightText(deity, query)}</p>
                        <p><strong title="Caste">ðŸŒ¿ :</strong> ${highlightText(branchName, query)}</p>
                        <p><strong title="Surname">ðŸŒ³:</strong> ${highlightText(surname.hi, query)}</p>
                        <button class="copy-button" data-gotra="${gotra}" data-surname="${surname.en}" data-deity="${deity}" data-branch="${branchName}">
                            ...
                        </button>
                    </div>
                `).join("");
            }

            function filterAndDisplayCards(filteredData, query) {
                cardContainer.innerHTML = ""; // Clear the container before rendering filtered cards

                filteredData.forEach((branch, index) => {
                    const card = document.createElement("div");
                    card.className = "card";
                    const colorIndex = index % colors.length;
                    card.style.backgroundColor = colors[colorIndex];

                    const keyValueHTML = createKeyValuePairs(branch, query);
                    const surnamesHTML = createSurnameCards(branch.Surnames, branch.Gotra, branch.Deity, branch.Caste, query);

                    const surnamesJson = branch.Surnames.length > 0 ? JSON.stringify(branch.Surnames.map((surname) => surname.en)) : "[]";

                    const cardContent = `
                        <div class="card-header">
                            ${keyValueHTML}
                        </div>
                        <div class="card-body">
                            <h3>Surnames</h3>
                            <div class="surname-container">
                                ${surnamesHTML}
                            </div>
                        </div>
                        <button class="copy-button-all" data-gotra="${branch.Gotra}" data-surname='${surnamesJson}' 
                        data-deity="${branch.Deity}" data-branch="${branch.Caste}">
                            Copy All
                        </button>`;

                    card.innerHTML = cardContent;

                    // Add event listener for clicking the card
                    card.addEventListener("click", (event) => {
                        // Avoid triggering when clicking the buttons inside the card
                        if (!event.target.classList.contains("copy-button") && !event.target.classList.contains("copy-button-all")) {
                            card.classList.toggle("open");
                        }
                    });

                    // Automatically open cards that match the query
                    if (query && card.innerHTML.toLowerCase().includes(query.toLowerCase())) {
                        card.classList.add("open");
                    }

                    cardContainer.appendChild(card);
                });
            }

            filterAndDisplayCards(data, "");

            searchInput.addEventListener("input", () => {
                const query = searchInput.value.toLowerCase();

                const filteredData = data.filter((branch) => {
                    const gotra = branch.Gotra.toLowerCase();
                    const deity = branch.Deity.toLowerCase();
                    const caste = branch.Caste.toLowerCase();
                    const surnames = Array.isArray(branch.Surnames) ? branch.Surnames : [];
                    const surnameTexts = surnames.map((surname) => `${surname.en?.toLowerCase() || ""} ${surname.hi?.toLowerCase() || ""}`);

                    return (
                        gotra.includes(query) ||
                        deity.includes(query) ||
                        caste.includes(query) ||
                        surnameTexts.some((surname) => surname.includes(query))
                    );
                });

                filterAndDisplayCards(filteredData, query);
            });
        })
        .catch((error) => {
            console.error("Error fetching data: ", error);
        });
</script>
