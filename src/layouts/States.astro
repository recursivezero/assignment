---
import "../assets/styles/states.css";
---

<style>
    .search-container {
        display: flex;
        justify-content: center;
        margin: 20px 0;
    }

    #search-box {
        width: 50%;
        padding: 10px;
        font-size: 16px;
        border: 2px solid #ddd;
        border-radius: 5px;
        margin-bottom: 1em;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        transition: box-shadow 0.3s ease-in-out;
    }

    #search-box:focus {
        outline: none;
        box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.2);
    }

</style>

<!-- Search box -->
<div class="search-container">
    <input type="search" id="search-box" placeholder="Search by State, Capital, Vehicle Code, Language, or District..." />
</div>
    <div class="card-container" id="card-container"></div>

<script>
    import { stateColors } from "../utils/constants.ts";

    fetch("/states.json")
        .then((response) => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then((data) => {
            const cardContainer = document.getElementById("card-container");
            const searchBox = document.getElementById("search-box");

            if (!cardContainer) {
                console.error("Card container element not found");
                return;
            }

            function highlightText(text, searchValue) {
                if (!searchValue) return text;
                const regex = new RegExp(`(${searchValue.trim()})`, "gi");
                return text.replace(regex, "<span id='highlight' style='background-color: yellow'>$1</span>");
            }

            function debounce(func, delay) {
                let timeout;
                return function (...args) {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(this, args), delay);
                };
            }

            function closeAllCards() {
                const cards = document.querySelectorAll('.card');
                cards.forEach(card => {
                    card.classList.remove("open");
                    const cardBody = card.querySelector('.card-body');
                    if (cardBody) cardBody.classList.add("hidden");
                });
            }

            function toggleCard(card) {
                card.classList.toggle("open");
                const cardBody = card.querySelector('.card-body');
                if (card.classList.contains("open")) {
                    card.style.gridColumn = "1 / -1";
                    card.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                    cardBody.classList.remove("hidden");
                } else {
                    card.style.gridColumn = "";
                    cardBody.classList.add("hidden");
                }
            }

            function renderCards(filteredData, searchValue = "") {
                cardContainer.innerHTML = "";
                filteredData.forEach((stateInfo, index) => {
                    const card = document.createElement("div");
                    card.className = "card";
                    const colorIndex = index % stateColors.length;
                    card.style.backgroundColor = stateColors[colorIndex];

                    const cardContent = `
                        <div class="card-header">
                            <p><span class="info-icon">üìç:</span> <strong title="State">${highlightText(stateInfo.state, searchValue)}</strong></p>
                            <p><span class="info-icon">üèõÔ∏è:</span> <strong title="Capital">${highlightText(stateInfo.capital, searchValue)}</strong></p>
                            <p><span class="info-icon">üöó:</span> <strong title="Vehicle_Code">${highlightText(stateInfo.vehicle_code, searchValue)}</strong></p>
                            <p><span class="info-icon">üó£Ô∏è:</span> <strong title="Languages">${stateInfo.languages.map(lang => highlightText(lang, searchValue)).join(', ')}</strong></p>
                        </div>
                        <div class="card-body hidden">
                            ${stateInfo.districts.map(district => `
                                <div class="district-card">
                                    <p><strong>District:</strong> ${highlightText(district, searchValue)}</p>
                                </div>
                            `).join('')}
                        </div>
                    `;

                    card.innerHTML = cardContent;

                    card.addEventListener("click", (event) => {
                        const target = event.target as HTMLElement;
                        if (!target.closest('.district-card')) {
                            toggleCard(card);
                        }
                        event.stopPropagation();
                    });

                    cardContainer.appendChild(card);
                });
            }

            const handleSearch = debounce((event) => {
                const searchValue = event.target.value.trim().toLowerCase();

                if (!searchValue) {
                    closeAllCards();
                    renderCards(data);
                    return;
                }

                const filteredData = data.filter(stateInfo =>
                    stateInfo.state.toLowerCase().includes(searchValue) ||
                    stateInfo.capital.toLowerCase().includes(searchValue) ||
                    stateInfo.vehicle_code.toLowerCase().includes(searchValue) ||
                    stateInfo.languages.some(lang => lang.toLowerCase().includes(searchValue)) ||
                    stateInfo.districts.some(district => district.toLowerCase().includes(searchValue))
                );

                renderCards(filteredData, searchValue);

                // Automatically open matching cards
                const cards = document.querySelectorAll('.card');
                filteredData.forEach(stateInfo => {
                    const card = Array.from(cards).find(card =>
                        card.querySelector('.card-header strong[title="State"]').textContent.includes(stateInfo.state)
                    );
                    if (card) toggleCard(card);
                });
            }, 300);

            searchBox.addEventListener("input", handleSearch);

            renderCards(data);
        })
        .catch((error) => {
            console.error("Error fetching data: ", error);
        });
</script>
